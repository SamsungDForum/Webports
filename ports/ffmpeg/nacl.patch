diff --git a/configure b/configure
index 231c6c3..7fb1ce7 100755
--- a/configure
+++ b/configure
@@ -3358,7 +3358,11 @@ install="install"
 ln_s_default="ln -s -f"
 nm_default="nm -g"
 pkg_config_default=pkg-config
-ranlib_default="ranlib"
+if [ $NACL_ARCH != le32 ] && ranlib 2>&1 | grep -q "\-D "; then
+    ranlib_default="ranlib -D"
+else
+    ranlib_default="ranlib"
+fi
 strip_default="strip"
 version_script='--version-script'
 x86asmexe_default="nasm"
diff --git a/libavcodec/avcodec.h b/libavcodec/avcodec.h
index 18c3e3e..94d2df1 100644
--- a/libavcodec/avcodec.h
+++ b/libavcodec/avcodec.h
@@ -1614,7 +1614,12 @@ enum AVPacketSideDataType {
      * If its value becomes huge, some code using it
      * needs to be updated as it assumes it to be smaller than other limits.
      */
-    AV_PKT_DATA_NB
+    AV_PKT_DATA_NB,
+
+    /**
+     * Encryption metadata - iv, kid and subsamples
+     */
+    AV_PKT_DATA_ENCRYPT_INFO
 };
 
 #define AV_PKT_DATA_QUALITY_FACTOR AV_PKT_DATA_QUALITY_STATS //DEPRECATED
@@ -1724,6 +1729,19 @@ typedef struct AVPacket {
  */
 #define AV_PKT_FLAG_TRUSTED   0x0008
 
+typedef struct AVEncBytes {
+    uint32_t bytes_of_clear_data;
+    uint32_t bytes_of_enc_data;
+} AVEncBytes;
+
+typedef struct AVEncInfo {
+    uint8_t iv_size;
+    uint8_t iv[16];
+    uint8_t kid[16];
+    uint8_t subsample_count;
+    AVEncBytes subsamples[];
+} AVEncInfo;
+
 enum AVSideDataParamChangeFlags {
     AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT  = 0x0001,
     AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 0x0002,
diff --git a/libavformat/Makefile b/libavformat/Makefile
index df709c2..5514aaf 100644
--- a/libavformat/Makefile
+++ b/libavformat/Makefile
@@ -3,8 +3,13 @@ DESC = FFmpeg container format library
 
 HEADERS = avformat.h                                                    \
           avio.h                                                        \
+          rtpdec.h                                                      \
+          rtp.h                                                         \
+          srtp.h                                                        \
+          url.h                                                         \
           version.h                                                     \
 
+
 OBJS = allformats.o         \
        avio.o               \
        aviobuf.o            \
diff --git a/libavformat/avformat.h b/libavformat/avformat.h
index b0de66a..9504476 100644
--- a/libavformat/avformat.h
+++ b/libavformat/avformat.h
@@ -870,6 +870,12 @@ typedef struct AVStreamInternal AVStreamInternal;
 #define AV_PTS_WRAP_ADD_OFFSET  1   ///< add the format specific offset on wrap detection
 #define AV_PTS_WRAP_SUB_OFFSET  -1  ///< subtract the format specific offset on wrap detection
 
+typedef struct AVProtectionSystemSpecificData {
+    uint8_t system_id[16];
+    uint8_t* pssh_box;      ///< Raw pssh box data, including box size and tag
+    uint32_t pssh_box_size; ///< Raw pssh box data size
+} AVProtectionSystemSpecificData;
+
 /**
  * Stream structure.
  * New fields can be added to the end with minor version bumps.
@@ -1917,6 +1923,13 @@ typedef struct AVFormatContext {
      * - decoding: set by user
      */
     int max_streams;
+
+    /**
+     * Each entry contains data extracted from the pssh box and may be
+     * identified by the AVProtectionSystemSpecificData::system_id.
+     */
+    AVProtectionSystemSpecificData* protection_system_data;
+    uint32_t protection_system_data_count;
 } AVFormatContext;
 
 /**
diff --git a/libavformat/isom.h b/libavformat/isom.h
index b9380e9..fc0c018 100644
--- a/libavformat/isom.h
+++ b/libavformat/isom.h
@@ -127,6 +127,16 @@ typedef struct MOVIndexRange {
     int64_t end;
 } MOVIndexRange;
 
+typedef struct MOVEncryptionInfo {
+    uint8_t crypt_byte_block;
+    uint8_t skip_byte_block;
+    uint8_t is_protected;
+    uint8_t per_sample_iv_size;
+    uint8_t constant_iv_size;
+    uint8_t* kid;
+    uint8_t* constant_iv;
+} MOVEncryptionInfo;
+
 typedef struct MOVStreamContext {
     AVIOContext *pb;
     int pb_is_copied;
@@ -209,9 +219,16 @@ typedef struct MOVStreamContext {
         uint8_t* auxiliary_info_end;
         uint8_t* auxiliary_info_pos;
         uint8_t auxiliary_info_default_size;
+        uint32_t auxiliary_info_sample_count;
         uint8_t* auxiliary_info_sizes;
         size_t auxiliary_info_sizes_count;
         int64_t auxiliary_info_index;
+        uint64_t* auxiliary_info_offsets;
+        size_t auxiliary_info_offsets_count;
+
+        MOVEncryptionInfo* default_encryption_info;
+        MOVEncryptionInfo* sample_encryption_info;
+
         struct AVAESCTR* aes_ctr;
     } cenc;
 } MOVStreamContext;
diff --git a/libavformat/mov.c b/libavformat/mov.c
index 9a6c3b3..a23c5a3 100644
--- a/libavformat/mov.c
+++ b/libavformat/mov.c
@@ -76,6 +76,7 @@ static int mov_read_default(MOVContext *c, AVIOContext *pb, MOVAtom atom);
 static int mov_read_mfra(MOVContext *c, AVIOContext *f);
 static int64_t add_ctts_entry(MOVStts** ctts_data, unsigned int* ctts_count, unsigned int* allocated_size,
                               int count, int duration);
+static int mov_read_seig(MOVContext *c, AVIOContext *pb, MOVAtom atom, int version);
 
 static int mov_metadata_track_or_disc_number(MOVContext *c, AVIOContext *pb,
                                              unsigned len, const char *key)
@@ -989,12 +990,127 @@ static int mov_read_pasp(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     return 0;
 }
 
+static int sample_aux_info_read(MOVContext *c, AVIOContext *pb, MOVStreamContext *sc,
+                                int64_t offset,  size_t* data_size, size_t sample_data_size)
+{
+    MOVFragment *frag = &c->fragment;
+    size_t i;
+
+    if (sample_data_size == 0) {
+        /* Ignoring reading of subsamples, as some content might signal
+         * clear data this way. */
+        av_log(c->fc, AV_LOG_WARNING, "Got sample_data_size == 0\n");
+        return 0;
+    }
+
+    offset += frag->base_data_offset;
+    if (avio_seek(pb, offset, SEEK_SET) != offset) {
+        av_log(c->fc, AV_LOG_ERROR, "Can't seek to aux info position\n");
+        return AVERROR_INVALIDDATA;
+    }
+
+    sc->cenc.auxiliary_info = av_realloc(sc->cenc.auxiliary_info,
+            *data_size + sample_data_size);
+    if (!sc->cenc.auxiliary_info) {
+        av_log(c->fc, AV_LOG_ERROR, "Out of memory\n");
+        return AVERROR(ENOMEM);
+    }
+
+    for (i = 0; i < sample_data_size; ++i)
+        sc->cenc.auxiliary_info[*data_size + i] = avio_r8(pb);
+
+    *data_size += sample_data_size;
+    return 0;
+}
+
+static int mov_cache_aux_info(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+{
+    AVStream *st;
+    MOVStreamContext *sc;
+    size_t data_size, sample_data_size, i;
+    int64_t curr_stream_pos = avio_tell(pb);
+    int64_t seek_ret;
+    int ret;
+    MOVFragment *frag = &c->fragment;
+
+    if (c->fc->nb_streams < 1)
+        return 0;
+
+    st = c->fc->streams[c->fc->nb_streams - 1];
+    sc = st->priv_data;
+
+    if (!sc->cenc.default_encryption_info && !sc->cenc.sample_encryption_info)
+        return 0;
+
+    if (sc->cenc.auxiliary_info_pos < sc->cenc.auxiliary_info_end) {
+        /* No need to cache aux info read from senc */
+        return 0;
+    }
+
+    av_freep(&sc->cenc.auxiliary_info);
+    sc->cenc.auxiliary_info_pos = NULL;
+    sc->cenc.auxiliary_info_end = NULL;
+
+    if (sc->cenc.auxiliary_info_default_size == 0 && !sc->cenc.auxiliary_info_sizes)
+        return 0;
+
+    data_size = 0;
+    sample_data_size = 0;
+    if (sc->cenc.auxiliary_info_offsets_count == 1) {
+        if (sc->cenc.auxiliary_info_default_size) {
+            sample_data_size = (size_t)
+                    sc->cenc.auxiliary_info_default_size * sc->sample_count;
+            if (!sample_data_size && sc->cenc.auxiliary_info_sample_count) {
+                sample_data_size =
+                    sc->cenc.auxiliary_info_default_size * sc->cenc.auxiliary_info_sample_count;
+            }
+        } else if (sc->cenc.auxiliary_info_sizes) {
+            for (i = 0; i < sc->cenc.auxiliary_info_sizes_count; ++i) {
+                sample_data_size += sc->cenc.auxiliary_info_sizes[i];
+            }
+        }
+
+        ret = sample_aux_info_read(c, pb, sc,
+                sc->cenc.auxiliary_info_offsets[0], &data_size, sample_data_size);
+        if (ret < 0)
+            goto end;
+    } else {
+        for (i = 0; i < sc->cenc.auxiliary_info_offsets_count; ++i) {
+            size_t sample_data_size = (sc->cenc.auxiliary_info_sizes ?
+                    (size_t) sc->cenc.auxiliary_info_sizes[i] :
+                    (size_t) sc->cenc.auxiliary_info_default_size);
+
+            ret = sample_aux_info_read(c, pb, sc,
+                    sc->cenc.auxiliary_info_offsets[i], &data_size, sample_data_size);
+            if (ret < 0)
+                goto end;
+        }
+    }
+
+    sc->cenc.auxiliary_info_pos = sc->cenc.auxiliary_info;
+    sc->cenc.auxiliary_info_end = sc->cenc.auxiliary_info + data_size;
+    sc->cenc.use_subsamples = sc->cenc.auxiliary_info_sizes || sc->sample_count;
+
+end:
+    seek_ret = avio_seek(pb, curr_stream_pos, SEEK_SET);
+    if (seek_ret < 0) {
+        av_log(c->fc, AV_LOG_ERROR, "can't seek back error: %d str: %s\n",
+                (int) seek_ret, av_err2str(seek_ret));
+        ret = (int) seek_ret;
+    }
+
+    return ret;
+}
+
 /* this atom contains actual media data */
 static int mov_read_mdat(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
     if (atom.size == 0) /* wrong one (MP4) */
         return 0;
     c->found_mdat=1;
+
+    mov_cache_aux_info(c, pb, atom);
+
     return 0; /* now go for moov */
 }
 
@@ -1170,6 +1286,28 @@ static int mov_read_moov(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 
 static int mov_read_moof(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
+#if defined(__native_client__)
+    if (!pb->seekable) {
+        int i;
+        for (i = 0; i < c->fc->nb_streams; i++) {
+            AVStream *st = c->fc->streams[i];
+            MOVStreamContext *sc = st->priv_data;
+
+            av_freep(&sc->ctts_data);
+            sc->ctts_allocated_size = 0;
+            sc->ctts_count = 0;
+            sc->ctts_sample = 0;
+            sc->ctts_index = 0;
+            sc->current_sample = 0;
+            sc->current_index = 0;
+
+            av_freep(&st->index_entries);
+            st->index_entries_allocated_size = 0;
+            st->nb_index_entries = 0;
+        }
+    }
+#endif
+
     if (!c->has_looked_for_mfra && c->use_mfra_for > 0) {
         c->has_looked_for_mfra = 1;
         if (pb->seekable & AVIO_SEEKABLE_NORMAL) {
@@ -2792,6 +2930,9 @@ static int mov_read_sbgp(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     version = avio_r8(pb); /* version */
     avio_rb24(pb); /* flags */
     grouping_type = avio_rl32(pb);
+    if (grouping_type != MKTAG( 's','e','i','g'))
+        return mov_read_seig(c, pb, atom, version);
+
     if (grouping_type != MKTAG( 'r','a','p',' '))
         return 0; /* only support 'rap ' grouping */
     if (version == 1)
@@ -5208,17 +5349,22 @@ static int mov_read_senc(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     MOVStreamContext *sc;
     size_t auxiliary_info_size;
 
-    if (c->decryption_key_len == 0 || c->fc->nb_streams < 1)
+    if (c->fc->nb_streams < 1)
         return 0;
 
     st = c->fc->streams[c->fc->nb_streams - 1];
     sc = st->priv_data;
 
     if (sc->cenc.aes_ctr) {
-        av_log(c->fc, AV_LOG_ERROR, "duplicate senc atom\n");
-        return AVERROR_INVALIDDATA;
+        /* This will happen if senc atoms are in moof boxes */
+        av_log(c->fc, AV_LOG_WARNING, "duplicate senc atom\n");
+        av_aes_ctr_free(sc->cenc.aes_ctr);
     }
 
+    av_freep(&sc->cenc.auxiliary_info);
+    sc->cenc.auxiliary_info_pos = NULL;
+    sc->cenc.auxiliary_info_end = NULL;
+
     avio_r8(pb); /* version */
     sc->cenc.use_subsamples = avio_rb24(pb) & 0x02; /* flags */
 
@@ -5246,13 +5392,17 @@ static int mov_read_senc(MOVContext *c, AVIOContext *pb, MOVAtom atom)
         return AVERROR_INVALIDDATA;
     }
 
-    /* initialize the cipher */
-    sc->cenc.aes_ctr = av_aes_ctr_alloc();
-    if (!sc->cenc.aes_ctr) {
-        return AVERROR(ENOMEM);
+    if (c->decryption_key_len != 0) {
+        /* initialize the cipher */
+        sc->cenc.aes_ctr = av_aes_ctr_alloc();
+        if (!sc->cenc.aes_ctr) {
+            return AVERROR(ENOMEM);
+        }
+
+        return av_aes_ctr_init(sc->cenc.aes_ctr, c->decryption_key);
     }
 
-    return av_aes_ctr_init(sc->cenc.aes_ctr, c->decryption_key);
+    return 0;
 }
 
 static int mov_read_saiz(MOVContext *c, AVIOContext *pb, MOVAtom atom)
@@ -5263,17 +5413,20 @@ static int mov_read_saiz(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     int atom_header_size;
     int flags;
 
-    if (c->decryption_key_len == 0 || c->fc->nb_streams < 1)
+    if (c->fc->nb_streams < 1)
         return 0;
 
     st = c->fc->streams[c->fc->nb_streams - 1];
     sc = st->priv_data;
 
     if (sc->cenc.auxiliary_info_sizes || sc->cenc.auxiliary_info_default_size) {
-        av_log(c->fc, AV_LOG_ERROR, "duplicate saiz atom\n");
-        return AVERROR_INVALIDDATA;
+        /* This will happen if saiz atoms are in moof boxes */
+        av_log(c->fc, AV_LOG_WARNING, "duplicate saiz atom\n");
     }
 
+    av_freep(&sc->cenc.auxiliary_info_sizes);
+    sc->cenc.auxiliary_info_sizes_count = 0;
+
     atom_header_size = 9;
 
     avio_r8(pb); /* version */
@@ -5287,7 +5440,7 @@ static int mov_read_saiz(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     }
 
     sc->cenc.auxiliary_info_default_size = avio_r8(pb);
-    avio_rb32(pb);    /* entries */
+    sc->cenc.auxiliary_info_sample_count = avio_rb32(pb);    /* entries */
 
     if (atom.size <= atom_header_size) {
         return 0;
@@ -5383,6 +5536,161 @@ static int mov_seek_auxiliary_info(MOVContext *c, MOVStreamContext *sc, int64_t
     return 0;
 }
 
+static int mov_read_saio(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+{
+    AVStream *st;
+    MOVStreamContext *sc;
+    uint8_t version;
+    int flags;
+    uint32_t i;
+
+    if (c->fc->nb_streams < 1)
+        return AVERROR_INVALIDDATA;
+
+    st = c->fc->streams[c->fc->nb_streams - 1];
+    sc = st->priv_data;
+
+    av_freep(&sc->cenc.auxiliary_info_offsets);
+
+    version = avio_r8(pb);
+    flags = avio_rb24(pb);
+    if (flags & 0x01)
+        avio_rb64(pb);
+
+    sc->cenc.auxiliary_info_offsets_count = avio_rb32(pb);
+    sc->cenc.auxiliary_info_offsets = (uint64_t*) av_malloc(
+            sc->cenc.auxiliary_info_offsets_count * sizeof(uint64_t));
+    for (i = 0; i < sc->cenc.auxiliary_info_offsets_count; ++i) {
+        sc->cenc.auxiliary_info_offsets[i] = (version == 0 ? avio_rb32(pb) : avio_rb64(pb));
+    }
+
+    return 0;
+}
+
+static void mov_encryption_info_free(MOVEncryptionInfo** info)
+{
+    if (!info || !*info)
+        return;
+
+    av_freep(&(*info)->kid);
+    av_freep(&(*info)->constant_iv);
+    av_freep(info);
+}
+
+static int read_encryption_info(MOVContext *c, AVIOContext *pb, MOVEncryptionInfo** info)
+{
+    int i;
+
+    mov_encryption_info_free(info);
+    *info = av_mallocz(sizeof(struct MOVEncryptionInfo));
+    if (!*info) {
+        av_log(c->fc, AV_LOG_ERROR, "can't allocate memory\n");
+        return AVERROR(ENOMEM);
+    }
+
+    avio_r8(pb); /* reserved */
+    int byte_block = avio_r8(pb);
+    (*info)->crypt_byte_block = byte_block & 0x0F;
+    (*info)->skip_byte_block = (byte_block & 0xF0) >> 4;
+
+    (*info)->is_protected = avio_r8(pb);
+    (*info)->per_sample_iv_size = avio_r8(pb);
+    av_freep(&(*info)->kid);
+    (*info)->kid = av_malloc(16);
+    for (i = 0; i < 16; ++i)
+        (*info)->kid[i] = avio_r8(pb);
+
+    if ((*info)->is_protected == 1 && (*info)->per_sample_iv_size == 0) {
+        (*info)->constant_iv_size = avio_r8(pb);
+        av_freep(&(*info)->constant_iv);
+        (*info)->constant_iv = av_malloc((*info)->constant_iv_size);
+        for (i = 0; i < (*info)->constant_iv_size; ++i)
+            (*info)->constant_iv[i] = avio_r8(pb);
+    }
+
+    return 0;
+}
+
+static int mov_read_tenc(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+{
+    AVStream *st;
+    MOVStreamContext *sc;
+    int version;
+
+    if (c->fc->nb_streams < 1)
+        return 0;
+
+    st = c->fc->streams[c->fc->nb_streams - 1];
+    sc = st->priv_data;
+
+    version = avio_r8(pb); /* version */
+    avio_rb24(pb); /* flags */
+
+    return read_encryption_info(c, pb, &sc->cenc.default_encryption_info);
+}
+
+static int mov_read_seig(MOVContext *c, AVIOContext *pb, MOVAtom atom, int version)
+{
+    AVStream *st;
+    MOVStreamContext *sc;
+    uint32_t default_length, entry_count;
+
+    if (c->fc->nb_streams < 1)
+        return 0;
+
+    st = c->fc->streams[c->fc->nb_streams - 1];
+    sc = st->priv_data;
+
+    if (version >= 1)
+        default_length = avio_rb32(pb);
+
+    entry_count = avio_rb32(pb);
+    /*
+     * FIXME: How to map sample to info in case when there will be many entries?
+     * for (i = 0; i < entry_count; ++i)
+     */
+    return read_encryption_info(c, pb, &sc->cenc.sample_encryption_info);
+}
+
+static int mov_read_pssh(MOVContext *c, AVIOContext *pb, MOVAtom atom)
+{
+    int ret = 0;
+    const int32_t box_header_size = 8;
+    const int32_t fullbox_fields_size = 4;
+    uint32_t pssh_size = atom.size + box_header_size;
+    AVProtectionSystemSpecificData* protection_system_data = NULL;
+
+    av_reallocp_array(
+        &c->fc->protection_system_data,
+        c->fc->protection_system_data_count + 1,
+        sizeof(AVProtectionSystemSpecificData));
+
+    protection_system_data = &c->fc->protection_system_data[
+        c->fc->protection_system_data_count++];
+
+    protection_system_data->pssh_box = av_malloc(pssh_size);
+    protection_system_data->pssh_box_size = pssh_size;
+
+    // rewind to the beginning of the pssh box...
+    avio_seek(pb, -box_header_size, SEEK_CUR);
+
+    // ...and now slurp all of its contents!
+    ret = avio_read(pb, protection_system_data->pssh_box, pssh_size);
+    if (ret != pssh_size) {
+        av_log(c->fc, AV_LOG_ERROR,
+            "mov_read_pssh cannot read pssh. Returned = %d\n", ret);
+        return AVERROR_INVALIDDATA;
+    }
+
+    // system id is placed after box header and FullBox fields (version and flags)
+    memcpy(protection_system_data->system_id,
+        protection_system_data->pssh_box + box_header_size + fullbox_fields_size,
+        sizeof(protection_system_data->system_id));
+
+    av_dict_set(&c->fc->metadata, "enc_pssh_key", "yes", 0);
+    return 0;
+}
+
 static int cenc_filter(MOVContext *c, MOVStreamContext *sc, int64_t index, uint8_t *input, int size)
 {
     uint32_t encrypted_bytes;
@@ -5458,6 +5766,78 @@ static int cenc_filter(MOVContext *c, MOVStreamContext *sc, int64_t index, uint8
     return 0;
 }
 
+static int cenc_filter_metadata_writer(MOVContext *c, MOVStreamContext *sc, AVPacket* pkt)
+{
+    uint16_t subsample_count = 0;
+    uint16_t i;
+    uint8_t iv[16];
+    uint8_t iv_size;
+    AVEncInfo* side_data;
+    MOVEncryptionInfo* info = (sc->cenc.sample_encryption_info ?
+            sc->cenc.sample_encryption_info : sc->cenc.default_encryption_info);
+
+    if (!info->is_protected)
+        return 0;
+
+    if (!sc->cenc.auxiliary_info) {
+        return 0; /* Don't report error some content may mark clear data this way */
+    }
+
+    if (info->per_sample_iv_size == 0) {
+        iv_size = info->constant_iv_size;
+        memcpy(iv, info->constant_iv, info->constant_iv_size);
+    } else {
+        /* read the iv */
+        if (info->per_sample_iv_size > sc->cenc.auxiliary_info_end - sc->cenc.auxiliary_info_pos) {
+            av_log(c->fc, AV_LOG_ERROR, "failed to read iv from the auxiliary info\n");
+            return AVERROR_INVALIDDATA;
+        }
+
+        iv_size = info->per_sample_iv_size;
+        memcpy(iv, sc->cenc.auxiliary_info_pos, iv_size);
+        sc->cenc.auxiliary_info_pos += iv_size;;
+    }
+
+    if (sc->cenc.use_subsamples) {
+        /* read the subsample count */
+        if (sizeof(uint16_t) > sc->cenc.auxiliary_info_end - sc->cenc.auxiliary_info_pos) {
+            av_log(c->fc, AV_LOG_ERROR, "failed to read subsample count from the auxiliary info\n");
+            return AVERROR_INVALIDDATA;
+        }
+
+        subsample_count = AV_RB16(sc->cenc.auxiliary_info_pos);
+        sc->cenc.auxiliary_info_pos += sizeof(uint16_t);
+    }
+
+    side_data = (AVEncInfo*) av_packet_new_side_data(pkt, AV_PKT_DATA_ENCRYPT_INFO,
+            sizeof(AVEncInfo) + subsample_count * sizeof(AVEncBytes));
+    if (!side_data) {
+        av_log(c->fc, AV_LOG_ERROR, "failed to read allocate memory for side data\n");
+        return AVERROR(ENOMEM);
+    }
+
+    side_data->iv_size = iv_size;
+    memcpy(side_data->iv, iv, iv_size);
+    memcpy(side_data->kid, info->kid, 16);
+    side_data->subsample_count = subsample_count;
+    for (i = 0; i < subsample_count; ++i) {
+        size_t required_bytes = sizeof(uint16_t) + sizeof(uint32_t);
+        size_t available_bytes = sc->cenc.auxiliary_info_end - sc->cenc.auxiliary_info_pos;
+        if (required_bytes > available_bytes) {
+            av_log(c->fc, AV_LOG_ERROR, "failed to read subsample from the auxiliary info\n");
+            return AVERROR_INVALIDDATA;
+        }
+
+        /* read the number of clear / encrypted bytes */
+        side_data->subsamples[i].bytes_of_clear_data = AV_RB16(sc->cenc.auxiliary_info_pos);
+        sc->cenc.auxiliary_info_pos += sizeof(uint16_t);
+        side_data->subsamples[i].bytes_of_enc_data = AV_RB32(sc->cenc.auxiliary_info_pos);
+        sc->cenc.auxiliary_info_pos += sizeof(uint32_t);
+    }
+
+    return 0;
+}
+
 static int mov_read_dops(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
     const int OPUS_SEEK_PREROLL_MS = 80;
@@ -5584,6 +5964,10 @@ static const MOVParseTableEntry mov_default_parse_table[] = {
 { MKTAG('f','r','m','a'), mov_read_frma },
 { MKTAG('s','e','n','c'), mov_read_senc },
 { MKTAG('s','a','i','z'), mov_read_saiz },
+{ MKTAG('s','a','i','o'), mov_read_saio },
+{ MKTAG('s','c','h','i'), mov_read_default },
+{ MKTAG('t','e','n','c'), mov_read_tenc },
+{ MKTAG('p','s','s','h'), mov_read_pssh },
 { MKTAG('d','f','L','a'), mov_read_dfla },
 { MKTAG('s','t','3','d'), mov_read_st3d }, /* stereoscopic 3D video box */
 { MKTAG('s','v','3','d'), mov_read_sv3d }, /* spherical video box */
@@ -6011,6 +6395,9 @@ static int mov_read_close(AVFormatContext *s)
 
         av_freep(&sc->cenc.auxiliary_info);
         av_freep(&sc->cenc.auxiliary_info_sizes);
+        av_freep(&sc->cenc.auxiliary_info_offsets);
+        mov_encryption_info_free(&sc->cenc.default_encryption_info);
+        mov_encryption_info_free(&sc->cenc.sample_encryption_info);
         av_aes_ctr_free(sc->cenc.aes_ctr);
 
         av_freep(&sc->stereo3d);
@@ -6437,6 +6824,11 @@ static int should_retry(AVIOContext *pb, int error_code) {
     if (error_code == AVERROR_EOF || avio_feof(pb))
         return 0;
 
+#if defined(__native_client__)
+    if (!pb->seekable)
+        return 0;
+#endif
+
     return 1;
 }
 
@@ -6642,6 +7034,14 @@ static int mov_read_packet(AVFormatContext *s, AVPacket *pkt)
         if (ret) {
             return ret;
         }
+    } else if (sc->cenc.default_encryption_info || sc->cenc.sample_encryption_info) {
+        ret = cenc_filter_metadata_writer(mov, sc, pkt);
+        if  (ret) {
+            return ret;
+        }
+
+        st->need_parsing = AVSTREAM_PARSE_NONE;
+        s->flags |= AVFMT_FLAG_KEEP_SIDE_DATA;
     }
 
     return 0;
diff --git a/libavformat/utils.c b/libavformat/utils.c
index 93722e3..688180f 100644
--- a/libavformat/utils.c
+++ b/libavformat/utils.c
@@ -4302,6 +4302,7 @@ void ff_free_stream(AVFormatContext *s, AVStream *st)
 void avformat_free_context(AVFormatContext *s)
 {
     int i;
+    uint32_t j;
 
     if (!s)
         return;
@@ -4333,6 +4334,9 @@ void avformat_free_context(AVFormatContext *s)
     av_freep(&s->streams);
     flush_packet_queue(s);
     av_freep(&s->internal);
+    for (j = 0; j < s->protection_system_data_count; ++j)
+        av_freep(&s->protection_system_data[j].pssh_box);
+    av_freep(&s->protection_system_data);
     av_free(s);
 }
 
